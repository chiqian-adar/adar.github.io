[{"title":"flexbox布局","date":"2017-04-21T01:33:55.998Z","path":"2017/04/21/Flex布局是什么？/","text":"Flex布局是什么？flex布局是W3C提出的一种新的布局方式，其与传统的布局相比具有更大的灵活性。利用flex布局，元素可以在各个方向上进行布局且能够自适应大小，更主要的是代码简单啊！！！不过这是有兼容性的。。。以下是各浏览器对flex布局的支持 基本概念 &lt;–more–&gt; 弹性容器(Flex container)包含着弹性项目的父元素。通过设置 display 属性的值为 flex 或 inline-flex 来定义弹性容器。 弹性项目(Flex item)弹性容器的每个子元素都称为弹性项目。 轴(Axis) 主轴(main axis) 侧轴(cross axis) 单个项目占据的主轴空间叫做 主轴尺寸(main size)，占据的交叉轴空间叫做 侧轴尺寸(cross size) 容器属性 flex-direction flex-wrap flex-flow justify-content align-items align-content flex-direction 决定主轴方向flex-direction: row | row-reverse | column column-reverse; row（默认）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 flex-wrap 项目的换行flex-wrap: nowrap | wrap | wrap-reverse; nowrap: (默认)不换行 wrap: 可以多行，第一行在上方 wrap-reverse: 可以多行，第一行在下方 nowrap wrap wrap-reverse flex-flow flex-flow为flex-direction 和 flex-wrap 的简写,默认值为row nowrapflex-flow: flex-direction || flex-wrap; justify-content 项目在主轴上的对齐方式。justify-content: flex-start | flex-end | center | space-between | space-around; flex-start: 左对齐（默认） flex-end: 右对齐 center: 居中对齐 space-between:两端对齐，项目之间的间距 space-around: 均匀对齐，每个项目两端的间距相等 align-items 项目在交叉轴上的对齐方式align-items: flex-start | flex-end | center | baseline | stretch; flex-start: 交叉轴起点对齐 flex-end: 交叉轴终点对齐 center: 交叉轴居中对齐 baseline: 第一行文字的底部对齐 stretch: （默认）如果项目木有设置高度或者高度为auto,那么项目拉伸充满整个交叉轴空间 flex-diretion决定主轴的方向，justfy-content是在主轴上的齐方式，align-items 是在交叉轴上的对齐方式，因此它们之间是相互影响的。 align-content 定义了多根轴线的对齐方式（项目只有一行，该属性不起作用）align-content: flex-start | flex-end | center | space-between | space-around | stretch; flex-start：与交叉轴的起点对齐。 flex-end：与交叉轴的终点对齐。 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴。 项目的属性 order flex-grow flex-shrink flex-basis flex align-self order 定义项目的排列顺序（不必按照文档流的顺序）order: (integer);数值越小，排列越靠前，默认为0 flex-grow 定义项目的放大比例，默认为0（有剩空间时大小不变）flex-grow: ; / default 0 / flex-shrink 定义了项目的缩小比例，默认为1flex-shrink: ; / default 1 /如果为0时不变大小 flex-basis 定义项目占据的主轴空间（main size）即固定大小相当于width,默认是auto. flex-basis: (length) | auto; / default auto / 可能被其他flex属性所影响,如:flex-diretion flex flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ] 两个快捷值:auto (1 1 auto) 和 none (0 0 auto) align-self 定义单个项目在交叉轴的对齐方式，可覆盖align-items属性取值和align-items一样：align-self: auto | flex-start | flex-end | center | baseline | stretch; 参考来自 Flex 布局教程：语法篇 通过动图形象地为你介绍 flexbox 是如何工作的（一）","tags":[{"name":"flexbox","slug":"flexbox","permalink":"https://chiqian-adar.github.io/adar.github.io/tags/flexbox/"},{"name":"css3","slug":"css3","permalink":"https://chiqian-adar.github.io/adar.github.io/tags/css3/"},{"name":"布局","slug":"布局","permalink":"https://chiqian-adar.github.io/adar.github.io/tags/布局/"},{"name":"前端","slug":"前端","permalink":"https://chiqian-adar.github.io/adar.github.io/tags/前端/"}]},{"title":"关于markdown的常用语法","date":"2017-04-20T05:25:32.445Z","path":"2017/04/20/markdown的常用语法/","text":"markdown的常用语法1、粗体与斜体 使用*(斜体)和**(粗体)来包围文字 2、分级标题 标题前添加#，# 表示一级标题，## 表示二级标题，以此类推 3、外链接 [描述]（链接）为文字加链接 4、无序列表 用 * + - （三者之一）来包围每一列 5、有序列表 数字加上小数点 1. first 2. second 3. third 6、引用 > 放在句子前面 7、行内代码块 如：`html` 注意( 这个符号是在 Esc 键下面) 8、插入图片 ！[描述]（路径或地址） 9、目录 直接写下 [TOC] 10、标签表示 tags: - 技能 - markdown 11、删除线 用~~来包围使用删除线的内容 12、代码块 每行代码前加四个空格（Tab) 13、加强的代码块有行号显示 用 ``` 加上代码类别(也可不加)来包围 例如：``` pthon 14、分割线 另起一行输入 — 15、反编译符 在标记符号前加\\ 如 \\## 注！以上标记符与文字间要有空格，且建议行与行之间添加空行。 另外强烈推荐一个在线编缉markdown的网站，还支持VIM模式编写！！！ 作业部落","tags":[{"name":"技能","slug":"技能","permalink":"https://chiqian-adar.github.io/adar.github.io/tags/技能/"},{"name":"markdown","slug":"markdown","permalink":"https://chiqian-adar.github.io/adar.github.io/tags/markdown/"}]}]